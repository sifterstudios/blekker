// Copyright 2024 Sifterstudios

// Mocks generated by Mockito 5.4.4 from annotations
// in blekker/test/features/auth/presentation/pages/login_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:blekker/app/error/failures.dart' as _i8;
import 'package:blekker/features/auth/data/datasources/auth_remote_data_source.dart'
    as _i4;
import 'package:blekker/features/auth/data/repository/auth_repository_impl.dart'
    as _i14;
import 'package:blekker/features/auth/domain/entities/session_entity.dart'
    as _i12;
import 'package:blekker/features/auth/domain/entities/user_entity.dart' as _i9;
import 'package:blekker/features/auth/domain/repository/auth_repository.dart'
    as _i2;
import 'package:blekker/features/auth/domain/usecases/user_login.dart' as _i11;
import 'package:blekker/features/auth/domain/usecases/user_sign_up.dart' as _i5;
import 'package:blekker/features/auth/presentation/bloc/auth_bloc.dart' as _i3;
import 'package:flutter_bloc/flutter_bloc.dart' as _i13;
import 'package:fpdart/fpdart.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthRepository_0 extends _i1.SmartFake
    implements _i2.AuthRepository {
  _FakeAuthRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthState_1 extends _i1.SmartFake implements _i3.AuthState {
  _FakeAuthState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthRemoteDataSource_2 extends _i1.SmartFake
    implements _i4.AuthRemoteDataSource {
  _FakeAuthRemoteDataSource_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserSignup].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserSignup extends _i1.Mock implements _i5.UserSignup {
  @override
  _i2.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
        returnValueForMissingStub: _FakeAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i6.Future<_i7.Either<_i8.Failure, _i9.UserEntity>> call(
          _i5.UserSignupParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<_i7.Either<_i8.Failure, _i9.UserEntity>>.value(
            _i10.dummyValue<_i7.Either<_i8.Failure, _i9.UserEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i7.Either<_i8.Failure, _i9.UserEntity>>.value(
                _i10.dummyValue<_i7.Either<_i8.Failure, _i9.UserEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i7.Either<_i8.Failure, _i9.UserEntity>>);
}

/// A class which mocks [UserLogin].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserLogin extends _i1.Mock implements _i11.UserLogin {
  @override
  _i2.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
        returnValueForMissingStub: _FakeAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i6.Future<_i7.Either<_i8.Failure, _i12.SessionEntity>> call(
          _i11.UserLoginParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i6.Future<_i7.Either<_i8.Failure, _i12.SessionEntity>>.value(
                _i10.dummyValue<_i7.Either<_i8.Failure, _i12.SessionEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i7.Either<_i8.Failure, _i12.SessionEntity>>.value(
                _i10.dummyValue<_i7.Either<_i8.Failure, _i12.SessionEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i7.Either<_i8.Failure, _i12.SessionEntity>>);
}

/// A class which mocks [AuthBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthBloc extends _i1.Mock implements _i3.AuthBloc {
  @override
  _i3.AuthState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAuthState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeAuthState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.AuthState);

  @override
  _i6.Stream<_i3.AuthState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i3.AuthState>.empty(),
        returnValueForMissingStub: _i6.Stream<_i3.AuthState>.empty(),
      ) as _i6.Stream<_i3.AuthState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isSessionValid(_i12.SessionEntity? storedSession) => (super.noSuchMethod(
        Invocation.method(
          #isSessionValid,
          [storedSession],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void add(_i3.AuthEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i3.AuthEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i3.AuthState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i3.AuthEvent>(
    _i13.EventHandler<E, _i3.AuthState>? handler, {
    _i13.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i13.Transition<_i3.AuthEvent, _i3.AuthState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void onChange(_i13.Change<_i3.AuthState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthEvent].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthEvent extends _i1.Mock implements _i3.AuthEvent {}

/// A class which mocks [AuthState].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthState extends _i1.Mock implements _i3.AuthState {}

/// A class which mocks [AuthRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i14.AuthRepositoryImpl {
  @override
  _i4.AuthRemoteDataSource get remoteDataSource => (super.noSuchMethod(
        Invocation.getter(#remoteDataSource),
        returnValue: _FakeAuthRemoteDataSource_2(
          this,
          Invocation.getter(#remoteDataSource),
        ),
        returnValueForMissingStub: _FakeAuthRemoteDataSource_2(
          this,
          Invocation.getter(#remoteDataSource),
        ),
      ) as _i4.AuthRemoteDataSource);

  @override
  _i6.Future<
      _i7.Either<_i8.Failure, _i12.SessionEntity>> loginWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i6.Future<_i7.Either<_i8.Failure, _i12.SessionEntity>>.value(
                _i10.dummyValue<_i7.Either<_i8.Failure, _i12.SessionEntity>>(
          this,
          Invocation.method(
            #loginWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i7.Either<_i8.Failure, _i12.SessionEntity>>.value(
                _i10.dummyValue<_i7.Either<_i8.Failure, _i12.SessionEntity>>(
          this,
          Invocation.method(
            #loginWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i6.Future<_i7.Either<_i8.Failure, _i12.SessionEntity>>);

  @override
  _i6.Future<_i7.Either<_i8.Failure, _i9.UserEntity>>
      signupWithEmailAndPassword({
    required String? name,
    required String? email,
    required String? password,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #signupWithEmailAndPassword,
              [],
              {
                #name: name,
                #email: email,
                #password: password,
              },
            ),
            returnValue:
                _i6.Future<_i7.Either<_i8.Failure, _i9.UserEntity>>.value(
                    _i10.dummyValue<_i7.Either<_i8.Failure, _i9.UserEntity>>(
              this,
              Invocation.method(
                #signupWithEmailAndPassword,
                [],
                {
                  #name: name,
                  #email: email,
                  #password: password,
                },
              ),
            )),
            returnValueForMissingStub:
                _i6.Future<_i7.Either<_i8.Failure, _i9.UserEntity>>.value(
                    _i10.dummyValue<_i7.Either<_i8.Failure, _i9.UserEntity>>(
              this,
              Invocation.method(
                #signupWithEmailAndPassword,
                [],
                {
                  #name: name,
                  #email: email,
                  #password: password,
                },
              ),
            )),
          ) as _i6.Future<_i7.Either<_i8.Failure, _i9.UserEntity>>);
}
